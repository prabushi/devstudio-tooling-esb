/**
 *
 * $Id$
 */
package org.wso2.developerstudio.eclipse.gmf.esb.validation;

import org.eclipse.emf.common.util.EList;

import org.wso2.developerstudio.eclipse.gmf.esb.AutoOffsetResetType;
import org.wso2.developerstudio.eclipse.gmf.esb.ConsumerType;
import org.wso2.developerstudio.eclipse.gmf.esb.ContentType;
import org.wso2.developerstudio.eclipse.gmf.esb.Enable;
import org.wso2.developerstudio.eclipse.gmf.esb.FeedType;
import org.wso2.developerstudio.eclipse.gmf.esb.InboundEndpointBehaviourType;
import org.wso2.developerstudio.eclipse.gmf.esb.InboundEndpointContainer;
import org.wso2.developerstudio.eclipse.gmf.esb.InboundEndpointOnErrorSequenceInputConnector;
import org.wso2.developerstudio.eclipse.gmf.esb.InboundEndpointOnErrorSequenceOutputConnector;
import org.wso2.developerstudio.eclipse.gmf.esb.InboundEndpointParameter;
import org.wso2.developerstudio.eclipse.gmf.esb.InboundEndpointSequenceInputConnector;
import org.wso2.developerstudio.eclipse.gmf.esb.InboundEndpointSequenceOutputConnector;
import org.wso2.developerstudio.eclipse.gmf.esb.InboundEndpointType;
import org.wso2.developerstudio.eclipse.gmf.esb.JMSCacheLevel;
import org.wso2.developerstudio.eclipse.gmf.esb.JMSConnectionFactoryType;
import org.wso2.developerstudio.eclipse.gmf.esb.JMSSessionAcknowledgement;
import org.wso2.developerstudio.eclipse.gmf.esb.MQTTSubscriptionQOS;
import org.wso2.developerstudio.eclipse.gmf.esb.OffsetsStorageType;
import org.wso2.developerstudio.eclipse.gmf.esb.PartitionAssignmentStrategyType;
import org.wso2.developerstudio.eclipse.gmf.esb.RegistryKeyProperty;
import org.wso2.developerstudio.eclipse.gmf.esb.TopicFilterFromType;
import org.wso2.developerstudio.eclipse.gmf.esb.TopicsType;
import org.wso2.developerstudio.eclipse.gmf.esb.VFSAction;
import org.wso2.developerstudio.eclipse.gmf.esb.VFSFileSort;
import org.wso2.developerstudio.eclipse.gmf.esb.WSClientSideBroadcastLevel;

/**
 * A sample validator interface for {@link org.wso2.developerstudio.eclipse.gmf.esb.InboundEndpoint}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface InboundEndpointValidator {
	boolean validate();

	boolean validateSequenceInputConnector(InboundEndpointSequenceInputConnector value);
	boolean validateSequenceOutputConnector(InboundEndpointSequenceOutputConnector value);
	boolean validateOnErrorSequenceInputConnector(InboundEndpointOnErrorSequenceInputConnector value);
	boolean validateOnErrorSequenceOutputConnector(InboundEndpointOnErrorSequenceOutputConnector value);
	boolean validateContainer(InboundEndpointContainer value);
	boolean validateName(String value);
	boolean validateType(InboundEndpointType value);
	boolean validateClass(String value);
	boolean validateProtocol(String value);
	boolean validateInboundEndpointBehaviour(InboundEndpointBehaviourType value);
	boolean validateInboundHttpPort(String value);
	boolean validateInboundWorkerPoolSizeCore(String value);
	boolean validateInboundWorkerPoolSizeMax(String value);
	boolean validateInboundWorkerThreadKeepAliveSec(String value);
	boolean validateInboundWorkerPoolQueueLength(String value);
	boolean validateInboundThreadGroupId(String value);
	boolean validateInboundThreadId(String value);
	boolean validateDispatchFilterPattern(String value);
	boolean validateInterval(String value);
	boolean validateSequential(boolean value);
	boolean validateCoordination(boolean value);
	boolean validateTransportVFSFileURI(String value);
	boolean validateWso2mbConnectionUrl(String value);
	boolean validateTransportVFSContentType(String value);
	boolean validateTransportVFSFileNamePattern(String value);
	boolean validateTransportVFSFileProcessInterval(String value);
	boolean validateTransportVFSFileProcessCount(String value);
	boolean validateTransportVFSLocking(Enable value);
	boolean validateTransportVFSMaxRetryCount(String value);
	boolean validateTransportVFSReconnectTimeout(String value);
	boolean validateTransportJMSSharedSubscription(boolean value);
	boolean validateTransportJMSSubscriptionName(String value);
	boolean validateTransportJMSPinnedServers(String value);
	boolean validateTransportVFSActionAfterProcess(VFSAction value);
	boolean validateTransportVFSMoveAfterProcess(String value);
	boolean validateTransportVFSActionAfterErrors(VFSAction value);
	boolean validateTransportVFSMoveAfterErrors(String value);
	boolean validateTransportVFSActionAfterFailure(VFSAction value);
	boolean validateTransportVFSMoveAfterFailure(String value);
	boolean validateTransportVFSAutoLockRelease(boolean value);
	boolean validateTransportVFSAutoLockReleaseInterval(String value);
	boolean validateTransportVFSLockReleaseSameNode(boolean value);
	boolean validateTransportVFSDistributedLock(boolean value);
	boolean validateTransportVFSStreaming(boolean value);
	boolean validateTransportVFSBuild(boolean value);
	boolean validateTransportVFSDistributedTimeout(String value);
	boolean validateJavaNamingFactoryInitial(String value);
	boolean validateJavaNamingProviderUrl(String value);
	boolean validateTransportJMSConnectionFactoryJNDIName(String value);
	boolean validateTransportJMSConnectionFactoryType(JMSConnectionFactoryType value);
	boolean validateTransportJMSConcurrentConsumers(String value);
	boolean validateTransportJMSDestination(String value);
	boolean validateTransportJMSSessionTransacted(boolean value);
	boolean validateTransportJMSSessionAcknowledgement(JMSSessionAcknowledgement value);
	boolean validateTransportJMSCacheLevel(JMSCacheLevel value);
	boolean validateTransportJMSUserName(String value);
	boolean validateTransportJMSPassword(String value);
	boolean validateTransportJMSJMSSpecVersion(String value);
	boolean validateTransportJMSSubscriptionDurable(String value);
	boolean validateTransportJMSDurableSubscriberClientID(String value);
	boolean validateTransportJMSMessageSelector(String value);
	boolean validateTransportJMSRetryDuration(String value);
	boolean validateTransportVFSMoveTimestampFormat(String value);
	boolean validateTransportVFSFileSortAttribute(VFSFileSort value);
	boolean validateTransportVFSFileSortAscending(boolean value);
	boolean validateTransportVFSSubFolderTimestampFormat(String value);
	boolean validateTransportVFSCreateFolder(boolean value);
	boolean validateTransportJMSReceiveTimeout(String value);
	boolean validateTransportJMSContentType(String value);
	boolean validateTransportJMSContentTypeProperty(String value);
	boolean validateTransportJMSReplyDestination(String value);
	boolean validateTransportJMSPubSubNoLocal(String value);
	boolean validateTransportJMSDurableSubscriberName(String value);
	boolean validateTransportMQTTConnectionFactory(String value);
	boolean validateTransportMQTTServerHostName(String value);
	boolean validateTransportMQTTServerPort(String value);
	boolean validateTransportMQTTTopicName(String value);
	boolean validateTransportMQTTSubscriptionQOS(MQTTSubscriptionQOS value);
	boolean validateTransportMQTTSessionClean(boolean value);
	boolean validateTransportMQTTSslEnable(String value);
	boolean validateTransportMQTTTemporaryStoreDirectory(String value);
	boolean validateTransportMQTTSubscriptionUsername(String value);
	boolean validateTransportMQTTSubscriptionPassword(String value);
	boolean validateTransportMQTTClientId(String value);
	boolean validateTruststore(String value);
	boolean validateKeystore(String value);
	boolean validateSslVerifyClient(String value);
	boolean validateSslProtocol(String value);
	boolean validateHttpsProtocols(String value);
	boolean validateCertificateRevocationVerifier(String value);
	boolean validateInboundHL7Port(String value);
	boolean validateInboundHL7AutoAck(boolean value);
	boolean validateInboundHL7MessagePreProcessor(String value);
	boolean validateInboundHL7CharSet(String value);
	boolean validateInboundHL7TimeOut(String value);
	boolean validateInboundHL7ValidateMessage(boolean value);
	boolean validateInboundHL7BuildInvalidMessages(boolean value);
	boolean validateInboundHL7PassThroughInvalidMessages(boolean value);
	boolean validateZookeeperConnect(String value);
	boolean validateGroupId(String value);
	boolean validateContentType(ContentType value);
	boolean validateConsumerType(ConsumerType value);
	boolean validateTopicsOrTopicFilter(TopicsType value);
	boolean validateTopicsName(String value);
	boolean validateTopicFilterFrom(TopicFilterFromType value);
	boolean validateTopicFilterName(String value);
	boolean validateSimpleConsumerTopic(String value);
	boolean validateSimpleConsumerBrokers(String value);
	boolean validateSimpleConsumerPort(String value);
	boolean validateSimpleConsumerPartition(String value);
	boolean validateSimpleConsumerMaxMessagesToRead(String value);
	boolean validateThreadCount(String value);
	boolean validateConsumerId(String value);
	boolean validateSocketTimeoutMs(String value);
	boolean validateSocketReceiveBufferBytes(String value);
	boolean validateFetchMessageMaxBytes(String value);
	boolean validateNumConsumerFetches(String value);
	boolean validateAutoCommitEnable(boolean value);
	boolean validateAutoCommitIntervalMs(String value);
	boolean validateQueuedMaxMessageChunks(String value);
	boolean validateRebalanceMaxRetries(String value);
	boolean validateFetchMinBytes(String value);
	boolean validateFetchWaitMaxMs(String value);
	boolean validateRebalanceBackoffMs(String value);
	boolean validateRefreshLeaderBackoffMs(String value);
	boolean validateAutoOffsetReset(AutoOffsetResetType value);
	boolean validateConsumerTimeoutMs(String value);
	boolean validateExcludeInternalTopics(boolean value);
	boolean validatePartitionAssignmentStrategy(PartitionAssignmentStrategyType value);
	boolean validateClientId(String value);
	boolean validateZookeeperSessionTimeoutMs(String value);
	boolean validateZookeeperConnectionTimeoutMs(String value);
	boolean validateZookeeperSyncTimeMs(String value);
	boolean validateOffsetsStorage(OffsetsStorageType value);
	boolean validateOffsetsChannelBackoffMs(String value);
	boolean validateOffsetsChannelSocketTimeoutMs(String value);
	boolean validateOffsetsCommitMaxRetries(String value);
	boolean validateDualCommitEnabled(boolean value);
	boolean validateInboundCxfRmHost(String value);
	boolean validateInboundCxfRmPort(String value);
	boolean validateInboundCxfRmConfigFile(String value);
	boolean validateEnableSSL(boolean value);
	boolean validateServiceParameters(EList<InboundEndpointParameter> value);
	boolean validateSuspend(boolean value);
	boolean validateTransportRabbitMqConnectionFactory(String value);
	boolean validateTransportRabbitMqServerHostName(String value);
	boolean validateTransportRabbitMqServerPort(String value);
	boolean validateTransportRabbitMqServerUserName(String value);
	boolean validateTransportRabbitMqServerPassword(String value);
	boolean validateTransportRabbitMqQueueName(String value);
	boolean validateTransportRabbitMqExchangeName(String value);
	boolean validateTransportRabbitMqQueueDurable(String value);
	boolean validateTransportRabbitMqQueueExclusive(String value);
	boolean validateTransportRabbitMqQueueAutoDelete(String value);
	boolean validateTransportRabbitMqQueueAutoAck(String value);
	boolean validateTransportRabbitMqQueueRoutingKey(String value);
	boolean validateTransportRabbitMqQueueDeliveryMode(String value);
	boolean validateTransportRabbitMqExchangeType(String value);
	boolean validateTransportRabbitMqExchangeDurable(String value);
	boolean validateTransportRabbitMqExchangeAutoDelete(String value);
	boolean validateTransportRabbitMqServerVirtualHost(String value);
	boolean validateTransportRabbitMqFactoryHeartbeat(String value);
	boolean validateTransportRabbitMqConnectionSslEnabled(String value);
	boolean validateTransportRabbitMqConnectionSslKeystoreLocation(String value);
	boolean validateTransportRabbitMqConnectionSslKeystoreType(String value);
	boolean validateTransportRabbitMqConnectionSslKeystorePassword(String value);
	boolean validateTransportRabbitMqConnectionSslTruststoreLocation(String value);
	boolean validateTransportRabbitMqConnectionSslTruststoreType(String value);
	boolean validateTransportRabbitMqConnectionSslTruststorePassword(String value);
	boolean validateTransportRabbitMqConnectionSslVersion(String value);
	boolean validateTransportRabbitMqMessageContentType(String value);
	boolean validateTransportRabbitMqConnectionRetryCount(String value);
	boolean validateTransportRabbitMqConnectionRetryInterval(String value);
	boolean validateTransportRabbitMqServerRetryInterval(String value);
	boolean validateTransportRabbitMqConsumerQos(RegistryKeyProperty value);
	boolean validateWsInboundPort(String value);
	boolean validateWsClientSideBroadcastLevel(WSClientSideBroadcastLevel value);
	boolean validateWsOutflowDispatchSequence(String value);
	boolean validateWsOutflowDispatchFaultSequence(String value);
	boolean validateWsBossThreadPoolSize(String value);
	boolean validateWsWorkerThreadPoolSize(String value);
	boolean validateWsSubprotocolHandlerClass(String value);
	boolean validateWsPipelineHandlerClass(String value);
	boolean validateTransportFeedURL(String value);
	boolean validateTransportFeedType(FeedType value);
	boolean validateTraceEnabled(boolean value);
	boolean validateStatisticsEnabled(boolean value);
}
