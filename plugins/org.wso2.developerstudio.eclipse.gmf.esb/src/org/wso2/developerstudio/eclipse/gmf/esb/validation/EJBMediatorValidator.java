/**
 *
 * $Id$
 */
package org.wso2.developerstudio.eclipse.gmf.esb.validation;

import org.eclipse.emf.common.util.EList;

import org.wso2.developerstudio.eclipse.gmf.esb.EJBMediatorInputConnector;
import org.wso2.developerstudio.eclipse.gmf.esb.EJBMediatorOutputConnector;
import org.wso2.developerstudio.eclipse.gmf.esb.MethodArgument;
import org.wso2.developerstudio.eclipse.gmf.esb.NamespacedProperty;
import org.wso2.developerstudio.eclipse.gmf.esb.PropertyValueType;

/**
 * A sample validator interface for {@link org.wso2.developerstudio.eclipse.gmf.esb.EJBMediator}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface EJBMediatorValidator {
	boolean validate();

	boolean validateInputConnector(EJBMediatorInputConnector value);
	boolean validateOutputConnector(EJBMediatorOutputConnector value);
	boolean validateBeanstalk(String value);
	boolean validateClass(String value);
	boolean validateMethod(String value);
	boolean validateSessionIdType(PropertyValueType value);
	boolean validateSessionIdLiteral(String value);
	boolean validateSessionIdExpression(NamespacedProperty value);
	boolean validateRemove(boolean value);
	boolean validateTarget(String value);
	boolean validateJNDIName(String value);
	boolean validateMethodArguments(EList<MethodArgument> value);
}
